# coding: utf-8

"""
    Platform API

    The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.

    The version of the OpenAPI document: 1.1.0
    Contact: support@ably.io
    Created by: https://www.ably.io/contact
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ably_platform_python_sdk import schemas  # noqa: F401


class Recipient(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Push recipient details for a device.
    """


    class MetaOapg:
        
        class properties:
            clientId = schemas.StrSchema
            deviceId = schemas.StrSchema
            deviceToken = schemas.StrSchema
            registrationToken = schemas.StrSchema
            
            
            class transportType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def APNS(cls):
                    return cls("apns")
                
                @schemas.classproperty
                def FCM(cls):
                    return cls("fcm")
                
                @schemas.classproperty
                def GCM(cls):
                    return cls("gcm")
            __annotations__ = {
                "clientId": clientId,
                "deviceId": deviceId,
                "deviceToken": deviceToken,
                "registrationToken": registrationToken,
                "transportType": transportType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientId"]) -> MetaOapg.properties.clientId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deviceId"]) -> MetaOapg.properties.deviceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deviceToken"]) -> MetaOapg.properties.deviceToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registrationToken"]) -> MetaOapg.properties.registrationToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transportType"]) -> MetaOapg.properties.transportType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["clientId", "deviceId", "deviceToken", "registrationToken", "transportType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientId"]) -> typing.Union[MetaOapg.properties.clientId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deviceId"]) -> typing.Union[MetaOapg.properties.deviceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deviceToken"]) -> typing.Union[MetaOapg.properties.deviceToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registrationToken"]) -> typing.Union[MetaOapg.properties.registrationToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transportType"]) -> typing.Union[MetaOapg.properties.transportType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["clientId", "deviceId", "deviceToken", "registrationToken", "transportType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        clientId: typing.Union[MetaOapg.properties.clientId, str, schemas.Unset] = schemas.unset,
        deviceId: typing.Union[MetaOapg.properties.deviceId, str, schemas.Unset] = schemas.unset,
        deviceToken: typing.Union[MetaOapg.properties.deviceToken, str, schemas.Unset] = schemas.unset,
        registrationToken: typing.Union[MetaOapg.properties.registrationToken, str, schemas.Unset] = schemas.unset,
        transportType: typing.Union[MetaOapg.properties.transportType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Recipient':
        return super().__new__(
            cls,
            *args,
            clientId=clientId,
            deviceId=deviceId,
            deviceToken=deviceToken,
            registrationToken=registrationToken,
            transportType=transportType,
            _configuration=_configuration,
            **kwargs,
        )
