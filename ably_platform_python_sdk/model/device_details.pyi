# coding: utf-8

"""
    Platform API

    The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.

    The version of the OpenAPI document: 1.1.0
    Contact: support@ably.io
    Created by: https://www.ably.io/contact
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ably_platform_python_sdk import schemas  # noqa: F401


class DeviceDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            clientId = schemas.StrSchema
            deviceSecret = schemas.StrSchema
            
            
            class formFactor(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PHONE(cls):
                    return cls("phone")
                
                @schemas.classproperty
                def TABLET(cls):
                    return cls("tablet")
                
                @schemas.classproperty
                def DESKTOP(cls):
                    return cls("desktop")
                
                @schemas.classproperty
                def TV(cls):
                    return cls("tv")
                
                @schemas.classproperty
                def WATCH(cls):
                    return cls("watch")
                
                @schemas.classproperty
                def CAR(cls):
                    return cls("car")
                
                @schemas.classproperty
                def EMBEDDED(cls):
                    return cls("embedded")
            id = schemas.StrSchema
            metadata = schemas.DictSchema
            
            
            class platform(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def IOS(cls):
                    return cls("ios")
                
                @schemas.classproperty
                def ANDROID(cls):
                    return cls("android")
        
            @staticmethod
            def push_recipient() -> typing.Type['Recipient']:
                return Recipient
            
            
            class push_state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("Active")
                
                @schemas.classproperty
                def FAILING(cls):
                    return cls("Failing")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("Failed")
            __annotations__ = {
                "clientId": clientId,
                "deviceSecret": deviceSecret,
                "formFactor": formFactor,
                "id": id,
                "metadata": metadata,
                "platform": platform,
                "push.recipient": push_recipient,
                "push.state": push_state,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientId"]) -> MetaOapg.properties.clientId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deviceSecret"]) -> MetaOapg.properties.deviceSecret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formFactor"]) -> MetaOapg.properties.formFactor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["push.recipient"]) -> 'Recipient': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["push.state"]) -> MetaOapg.properties.push_state: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["clientId", "deviceSecret", "formFactor", "id", "metadata", "platform", "push.recipient", "push.state", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientId"]) -> typing.Union[MetaOapg.properties.clientId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deviceSecret"]) -> typing.Union[MetaOapg.properties.deviceSecret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formFactor"]) -> typing.Union[MetaOapg.properties.formFactor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> typing.Union[MetaOapg.properties.platform, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["push.recipient"]) -> typing.Union['Recipient', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["push.state"]) -> typing.Union[MetaOapg.properties.push_state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["clientId", "deviceSecret", "formFactor", "id", "metadata", "platform", "push.recipient", "push.state", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        clientId: typing.Union[MetaOapg.properties.clientId, str, schemas.Unset] = schemas.unset,
        deviceSecret: typing.Union[MetaOapg.properties.deviceSecret, str, schemas.Unset] = schemas.unset,
        formFactor: typing.Union[MetaOapg.properties.formFactor, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        platform: typing.Union[MetaOapg.properties.platform, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeviceDetails':
        return super().__new__(
            cls,
            *args,
            clientId=clientId,
            deviceSecret=deviceSecret,
            formFactor=formFactor,
            id=id,
            metadata=metadata,
            platform=platform,
            _configuration=_configuration,
            **kwargs,
        )

from ably_platform_python_sdk.model.recipient import Recipient
